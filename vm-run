#!/usr/bin/python3
# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import errno
import os
import subprocess
import sys

from lib.constants import BOTS_DIR
from machine import testvm

parser = argparse.ArgumentParser(description='Run a test machine')
parser.add_argument('-v', '--verbose', action='store_true', help='Display verbose details')
parser.add_argument('-m', '--maintain', action='store_true', help='Changes are permanent')
parser.add_argument('-M', '--memory', type=int, help='Memory (in MiB) of the target machine')
parser.add_argument('-G', '--graphics', action='store_true', help='Display a graphics console')
parser.add_argument('-q', '--quiet', action='store_true', help="Don't connect text console")
parser.add_argument('-c', '--client', action='store_true', help="Open Cockpit Client (implies -q)")
parser.add_argument('-C', '--cpus', type=int, help='Number of cpus in the target machine')
parser.add_argument('-S', '--storage', default=[], action='append',
                    help='Add a qcow2 disk(s) at this path')
parser.add_argument('-e', '--execute', metavar='COMMAND', action='append',
                    help='Execute this (shell-interpreted) command (implies -q)')
parser.add_argument('-s', '--systemd-start', metavar='UNIT', action='append', dest='execute',
                    type=(lambda s: f"systemctl enable --now {s!s}"),
                    help='Start this systemd unit (implies -q)')
parser.add_argument('--no-network', action='store_true', help='Do not connect the machine to the Internet')

parser.add_argument('image', help='The image to run')
args = parser.parse_args()

if args.execute or args.client:
    args.quiet = True

try:
    network = testvm.VirtNetwork(0, image=args.image)

    machine = testvm.VirtMachine(verbose=args.verbose, image=args.image, maintain=args.maintain,
                                 networking=network.host(restrict=args.no_network),
                                 memory_mb=args.memory, cpus=args.cpus, graphics=args.graphics)

    # Check that image is downloaded
    if not os.path.exists(machine.image_file):
        try:
            ret = subprocess.call([os.path.join(BOTS_DIR, "image-download"), args.image])
        except OSError as ex:
            if ex.errno != errno.ENOENT:
                raise
        else:
            if ret != 0:
                sys.exit(ret)

    machine.start()

    for disk in args.storage:
        machine.add_disk(path=disk, image_type='qcow2')

    # we need this to execute any commands, but we also want to wait here
    # before we display the "Press ^C" message
    if args.quiet:
        machine.wait_boot()

    # execute any -e and -s commands
    if args.execute:
        for cmd in args.execute:
            print('#', cmd)
            machine.execute(cmd, stdout=None)

    # Graphics console necessary
    if args.graphics:
        machine.graphics_console()

    # else, if -q not specified, text console
    elif not args.quiet:
        machine.qemu_console()

    # else, just wait for a signal
    else:
        if args.client:
            subprocess.run(["gapplication", "action", "org.cockpit_project.CockpitClient",
                            "open-path", f"'={machine.ssh_user}@{machine.ssh_address}:{machine.ssh_port}'"])

        print(machine.diagnose(tty=False))
        print('[ ^C to terminate ]')
        machine.wait_for_exit()

except testvm.Failure as ex:
    sys.stderr.write("vm-run: %s\n" % ex)
    sys.exit(1)
