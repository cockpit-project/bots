#!/usr/bin/env python3

import argparse
import http.server
import os
import re
import subprocess


class GitHttpBackend(http.server.CGIHTTPRequestHandler):
    def git_http_backend(self, method: str, data: bytes = b'') -> None:
        path_info, _, query_string = self.path.partition('?')
        env = {
            **os.environ,
            'REQUEST_METHOD': method,
            'PATH_INFO': path_info,
            'QUERY_STRING': query_string,
            'GIT_PROTOCOL': self.headers['git-protocol'] or '',
            'CONTENT_TYPE': self.headers['content-type'] or '',
            'HTTP_CONTENT_ENCODING': self.headers['content-encoding'] or '',
        }
        result = subprocess.run(['git', 'http-backend'], env=env, input=data, stdout=subprocess.PIPE)
        if status := re.match(b'Status: ([0-9]+) (.+)$', result.stdout, re.M):
            self.send_response(int(status.group(1)), str(status.group(2)))
        else:
            self.send_response(http.HTTPStatus.OK, "Script output follows")
        self.flush_headers()
        self.wfile.write(result.stdout)

    def do_GET(self) -> None:
        self.git_http_backend('GET')

    def do_POST(self) -> None:
        data = self.rfile.read(int(self.headers['Content-Length']))
        self.git_http_backend('POST', data)


def main() -> None:
    parser = argparse.ArgumentParser(description="Serve a single git repository via HTTP")
    parser.add_argument('--port', '-p', type=int, default=0, help="Port number to bind to")
    parser.add_argument('--addr', '-a', default='127.0.0.1', help="Address to bind to")
    parser.add_argument('projects', help="The top-level directory containing repos to serve")
    args = parser.parse_args()

    os.environ['GIT_PROJECT_ROOT'] = os.path.abspath(args.projects)

    with http.server.HTTPServer((args.addr, args.port), GitHttpBackend) as httpd:
        host, port = httpd.socket.getsockname()[:2]
        print(f'git clone http://{host}:{port}/owner/repo')
        httpd.serve_forever()


if __name__ == '__main__':
    main()
