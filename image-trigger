#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2015 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

DAYS = 7

REFRESH = {
    "centos-7": {},
    "centos-8-stream": {},
    "debian-testing": {},
    "debian-stable": {},
    "fedora-32": {},
    "fedora-33": {},
    "fedora-34": {},
    "fedora-testing": {"refresh-days": 3},
    "fedora-coreos": {},
    "ubuntu-2004": {},
    "ubuntu-stable": {},
    "openshift": {"refresh-days": 30},
    "rhel-7-9": {},
    "rhel-8-3": {},
    "rhel-8-4": {},
    "rhel-atomic": {},
    "services": {"refresh-days": 30},
}

import argparse
import os
import random
import sys
import subprocess
import time

sys.dont_write_bytecode = True

from lib.CONSTANTS import BASE_DIR
import task
from task import github


def main():
    parser = argparse.ArgumentParser(description='Ensure necessary issue exists for image refresh')
    parser.add_argument('-v', '--verbose', action="store_true", default=False,
                        help="Print verbose information")
    parser.add_argument("image", nargs="?")
    opts = parser.parse_args()
    api = github.GitHub()

    try:
        scan(api, opts.image, opts.verbose)
    except RuntimeError as ex:
        sys.stderr.write("image-trigger: " + str(ex) + "\n")
        return 1

    return 0


# Check if the given files that match @pathspec are stale
# and haven't been updated in @days.
def stale(days, pathspec, ref="HEAD"):
    global verbose

    def execute(*args):
        if verbose:
            sys.stderr.write("+ " + " ".join(args) + "\n")
        output = subprocess.check_output(args, cwd=BASE_DIR, universal_newlines=True)
        if verbose:
            sys.stderr.write("> " + output + "\n")
        return output

    timestamp = execute("git", "log", "--max-count=1", "--pretty=format:%ct", ref, "--", pathspec)
    try:
        timestamp = int(timestamp)
    except ValueError:
        timestamp = 0

    # We randomize when we think this should happen over a day
    offset = days * 86400
    due = time.time() - random.randint(offset - 43200, offset + 43200)

    return timestamp < due


def scan(api, force, verbose):
    subprocess.check_call(["git", "fetch", "origin", "master"])
    for (image, options) in REFRESH.items():
        perform = False

        if force:
            perform = image == force
        else:
            days = options.get("refresh-days", DAYS)
            perform = stale(days, os.path.join("images", image), "origin/master")

        if perform:
            text = "Image refresh for {0}".format(image)
            issue = task.issue(text, text, "image-refresh", image)
            sys.stderr.write("#{0}: image-refresh {1}\n".format(issue["number"], image))


if __name__ == '__main__':
    sys.exit(main())
