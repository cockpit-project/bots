#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2021 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import sys
import time
import sqlite3
import argparse
import logging

# Seconds in an hour
HOUR = 3600


def main():
    parser = argparse.ArgumentParser(description='Generate statistics about failed tests')
    parser.add_argument("--db", default="test-results.db", help="Database name")
    parser.add_argument("--hours", default=12, type=int,
                        help="Number of hours to take statistics from. Default is %(default)s.")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    opts = parser.parse_args()

    if opts.verbose:
        logging.basicConfig(level=logging.DEBUG)

    db_conn = sqlite3.connect(opts.db)
    cursor = db_conn.cursor()

    since = time.time() - opts.hours * HOUR

    # Output in prometheus format, see:
    # https://prometheus.io/docs/instrumenting/exposition_formats/
    output = ""

    # Get total number of runs and wait time sum in last N hours
    (test_runs, test_runs_queue_wait_sum) = cursor.execute("""\
            SELECT COUNT(*), SUM(wait_seconds)
            FROM TestRuns
            WHERE time > ? ;""", (since, )).fetchone()
    if test_runs_queue_wait_sum is None:
        test_runs_queue_wait_sum = 0

    # Get how many test runs waited for more than 5 minutes
    test_runs_wait_5m = cursor.execute("""\
            SELECT COUNT(*)
            FROM TestRuns
            WHERE time > ? AND wait_seconds > 300; """, (since, )).fetchone()[0]

    # Get how many test runs waited for more than 1 hour
    test_runs_wait_1h = cursor.execute("""\
            SELECT COUNT(*)
            FROM TestRuns
            WHERE time > ? AND wait_seconds > 3600; """, (since, )).fetchone()[0]

    output += """# HELP queue_time_wait_seconds histogram of queue wait times in the last %i hours
# TYPE queue_time_wait_seconds histogram
queue_time_wait_seconds_bucket{le="300"} %i
queue_time_wait_seconds_bucket{le="3600"} %i
queue_time_wait_seconds_bucket{le="+Inf"} %i
queue_time_wait_seconds_sum %i
queue_time_wait_seconds_count %i
""" % (opts.hours, test_runs_wait_5m, test_runs_wait_1h, test_runs, test_runs_queue_wait_sum, test_runs)

    print(output)

    db_conn.close()


if __name__ == '__main__':
    sys.exit(main())
