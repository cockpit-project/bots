#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import getpass
import os
import socket
import subprocess
import sys
import urllib.parse

from lib.constants import IMAGES_DIR
from lib.directories import get_images_data_dir
from lib.stores import HYBRID_STORES, PUBLIC_STORES, REDHAT_STORES, CA_PEM
from lib import s3

from task import api


def upload(dest, source, public):
    url = urllib.parse.urlparse(dest)

    # Start building the command
    cmd = ["curl", "--progress-bar", "--fail", "--upload-file", source]

    def try_curl(cmd):
        print("Uploading to", cmd[-1].split('?')[0])  # hide authentication info
        # Passing through a non terminal stdout is necessary to make progress work
        curl = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        cat = subprocess.Popen(["cat"], stdin=curl.stdout)
        curl.stdout.close()
        ret = curl.wait()
        cat.wait()
        if ret != 0:
            sys.stderr.write("image-upload: unable to upload image: {0}\n".format(cmd[-1]))
        return ret

    # Pass credentials, if present
    if s3.is_key_present(url):
        # This is an S3 host for which we have a key
        headers = []
        if public:
            headers = [s3.ACL_PUBLIC]
            cmd.extend(['-H', s3.ACL_PUBLIC])
        dest = s3.sign_url(url, verb='PUT', headers=headers)

    elif api.token:
        user = url.username or getpass.getuser()
        cmd += ["--user", user + ":" + api.token]

    # First try to use the original URL with no extra help
    if try_curl(cmd + [dest]) == 0:
        return 0

    # Next, see if our CA_PEM helps, for stores with valid SSL cert on an OpenShift proxy
    cmd += ['--cacert', CA_PEM]
    if try_curl(cmd + [dest]) == 0:
        return 0

    # Fall back for stores that use our self-signed cockpit certificate
    # Parse out the actual address to connect to and override certificate info
    defport = url.scheme == 'http' and 80 or 443
    ai = socket.getaddrinfo(url.hostname, url.port or defport, socket.AF_INET, 0, socket.IPPROTO_TCP)
    for (family, socktype, proto, canonname, sockaddr) in ai:
        resolve = "cockpit-tests:{1}:{0}".format(*sockaddr)
        curl_url = "https://cockpit-tests:{0}{1}".format(url.port or defport, url.path)
        ret = try_curl(cmd + ["--resolve", resolve, curl_url])
        if ret == 0:
            return 0

    return 1


def main():
    parser = argparse.ArgumentParser(description='Upload bot state or images')
    parser.add_argument("--store", action="append", default=[], help="Where to send state or images")
    parser.add_argument("--state", action="store_true", help="Images or state not recorded in git")
    parser.add_argument('image', nargs='*')
    args = parser.parse_args()

    data_dir = get_images_data_dir()
    sources = []
    for image in args.image:
        if args.state:
            source = os.path.join(data_dir, image)
        else:
            link = os.path.join(IMAGES_DIR, image)
            if not os.path.islink(link):
                parser.error("image link does not exist: " + image)
            source = os.path.join(data_dir, os.readlink(link))
        if not os.path.isfile(source):
            parser.error("image does not exist: " + image)
        sources.append(source)

    for source in sources:
        basename = os.path.basename(source)
        public = not basename.startswith('rhel')

        # determine possible stores, unless explicitly given
        stores = args.store
        if not stores:
            stores = list(HYBRID_STORES)

            # these images are not freely redistributable, keep them Red Hat internal
            if public:
                stores.extend(PUBLIC_STORES)
            else:
                stores.extend(REDHAT_STORES)

        success = False
        for store in stores:
            dest = urllib.parse.urljoin(store, basename)
            ret = upload(dest, source, public)
            if ret == 0:
                success = True

        if not success:
            # all stores failed, so return last exit code
            return ret


if __name__ == '__main__':
    sys.exit(main())
