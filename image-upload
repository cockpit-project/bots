#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import getpass
import os
import subprocess
import sys
import urllib.parse

from lib.constants import IMAGES_DIR
from lib.directories import get_images_data_dir
from lib.stores import HYBRID_STORES, PUBLIC_STORES, REDHAT_STORES, CA_PEM
from lib import s3

from task import api


def upload(dest, source, public):
    url = urllib.parse.urlparse(dest)

    # Start building the command
    cmd = ["curl", "--progress-bar", "--fail", "--upload-file", source]

    # Pass credentials, if present
    if s3.is_key_present(url):
        # This is an S3 host for which we have a key
        headers = []
        if public:
            headers = [s3.ACL_PUBLIC]
        cmd += s3.sign_url(url, verb='PUT', headers=headers)

    elif api.token:
        user = url.username or getpass.getuser()
        cmd += ["--user", user + ":" + api.token, '--cacert', CA_PEM, dest]

    else:
        # No credentials?  That's not going to work...
        sys.stderr.write(f"image-upload: no credentials for {dest}")
        return 1

    print("Uploading to", dest, file=sys.stderr)
    curl = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    cat = subprocess.Popen(["cat"], stdin=curl.stdout)
    curl.stdout.close()
    ret = curl.wait()
    cat.wait()
    if ret != 0:
        sys.stderr.write(f"image-upload: unable to upload image: {dest}\n")

    return ret


def main():
    parser = argparse.ArgumentParser(description='Upload bot state or images')
    parser.add_argument("--store", action="append", default=[], help="Where to send state or images")
    parser.add_argument("--state", action="store_true", help="Images or state not recorded in git")
    parser.add_argument('image', nargs='*')
    args = parser.parse_args()

    data_dir = get_images_data_dir()
    sources = []
    for image in args.image:
        if args.state:
            source = os.path.join(data_dir, image)
        else:
            link = os.path.join(IMAGES_DIR, image)
            if not os.path.islink(link):
                parser.error("image link does not exist: " + image)
            source = os.path.join(data_dir, os.readlink(link))
        if not os.path.isfile(source):
            parser.error("image does not exist: " + image)
        sources.append(source)

    for source in sources:
        basename = os.path.basename(source)
        public = not basename.startswith('rhel')

        # determine possible stores, unless explicitly given
        stores = args.store
        if not stores:
            stores = list(HYBRID_STORES)

            # these images are not freely redistributable, keep them Red Hat internal
            if public:
                stores.extend(PUBLIC_STORES)
            else:
                stores.extend(REDHAT_STORES)

        success = False
        for store in stores:
            dest = urllib.parse.urljoin(store, basename)
            ret = upload(dest, source, public)
            if ret == 0:
                success = True

        if not success:
            # all stores failed, so return last exit code
            return ret


if __name__ == '__main__':
    sys.exit(main())
