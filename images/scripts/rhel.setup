#!/bin/bash

set -e
IMAGE="$1"

# HACK - virt-resize might not be able to resize our xfs rootfs,
# depending on how it was compiled and which plugins are installed,
# and will just silently not do it.  So we do it here.
#
df --output=source,fstype / | tail -n1 | while read source fstype; do
    case $fstype in
    ext*)
	    resize2fs $source
	    ;;
    xfs*)
	    xfs_growfs /
	    ;;
    esac
done

df -Th /

# If the file /root/.skip_repos is present on the machine,
# all actions regarding the repositories will be skipped:
# subscriptions, adding repos, deleting existing entries
SKIP_REPO_FLAG="/root/.skip_repos"

# Only start logging here.  Otherwise the subscription credentials
# appear in the output above.
#
set -x

if [ ! -f "$SKIP_REPO_FLAG" ]; then
    # Configure repositories.

    if [ -n "$BASEOS_REPO_URL" -a -n "$APPSTREAM_REPO_URL" ]; then
    # disable all default repos
    rm -f --verbose /etc/yum.repos.d/*.repo
cat <<EOF > /etc/yum.repos.d/rel-eng.repo
[RHEL-BaseOS]
name=rhel-baseos
baseurl=$BASEOS_REPO_URL
enabled=1
gpgcheck=0

[RHEL-AppStream]
name=rhel-appstream
baseurl=$APPSTREAM_REPO_URL
enabled=1
gpgcheck=0
EOF

    elif [ "${IMAGE#rhel-*}" != "$IMAGE" ]; then
        case "$IMAGE" in
            rhel-8-3) REPO="rhel-8/nightly/updates/RHEL-8/latest-RHEL-8.3.1" ;;
            rhel-8-4) REPO="rhel-8/nightly/RHEL-8/latest-RHEL-8.4" ;;
            rhel-8-5) REPO="rhel-8/nightly/RHEL-8/latest-RHEL-8.5" ;;
            rhel-9-0) REPO="rhel-9/nightly/RHEL-9/latest-RHEL-9.0" ;;
            *) echo "Unknown image $IMAGE"; exit 1
        esac
cat <<EOF > /etc/yum.repos.d/nightly.repo
[RHEL-NIGHTLY-BaseOS]
name=baseos
baseurl=http://download.devel.redhat.com/$REPO/compose/BaseOS/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-NIGHTLY-AppStream]
name=appstream
baseurl=http://download.devel.redhat.com/$REPO/compose/AppStream/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-NIGHTLY-BaseOS-Debug]
name=baseos-debug
baseurl=http://download.devel.redhat.com/$REPO/compose/BaseOS/x86_64/debug/tree/
enabled=0
gpgcheck=0

[RHEL-NIGHTLY-AppStream-Debug]
name=appstream-debug
baseurl=http://download.devel.redhat.com/$REPO/compose/AppStream/x86_64/debug/tree/
enabled=0
gpgcheck=0
EOF
    fi

    # make ipa-client available on RHEL-8
    if [ "${IMAGE#rhel-8*}" != "$IMAGE" ] || [ "${IMAGE#centos-8}" != "$IMAGE" ]; then
        dnf module enable -y idm:client
    fi
fi

dnf --nogpgcheck -y update

printf 'dictcheck = 0\nminlen = 6\n' >> /etc/security/pwquality.conf

echo foobar | passwd --stdin root

# We install all dependencies of the cockpit packages since we want
# them to not spontaneously change from one test run to the next when
# the distribution repository is updated.
COCKPIT_DEPS="\
device-mapper-multipath \
firewalld \
glib-networking \
json-glib \
kexec-tools \
libssh \
libvirt-dbus \
libvirt-client \
libvirt-daemon-kvm \
NetworkManager-team \
openssl \
PackageKit \
pcp-libs \
pcp \
podman \
realmd \
redhat-logos \
selinux-policy-targeted \
setroubleshoot-server \
subscription-manager \
sos \
tuned \
udisks2 \
udisks2-lvm2 \
udisks2-iscsi \
"

# We also install the packages necessary to join a FreeIPA domain so
# that we don't have to go to the network during a test run.
# on epel/rhel we have ipa-client instead of freeipa-client
IPA_CLIENT_PACKAGES="\
ipa-client \
oddjob \
oddjob-mkhomedir \
sssd \
sssd-dbus \
"

TEST_PACKAGES="\
boom-boot \
clevis-luks \
cryptsetup \
dnf-automatic \
dnf-utils \
dracut-fips \
gdb \
glibc-all-langpacks \
kmod-kvdo \
kpatch \
kpatch-dnf \
libvirt-daemon-config-network \
ltrace \
nmap-ncat \
python3-tracer \
qemu-kvm \
socat \
strace \
tang \
targetcli \
valgrind \
vdo \
virt-install \
"

if [ "${IMAGE#rhel*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES} subscription-manager-cockpit insights-client"
fi

# not yet available in 9
if [ "${IMAGE#rhel-9*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/kmod-kvdo /}"
    TEST_PACKAGES="${TEST_PACKAGES/vdo /}"
    TEST_PACKAGES="${TEST_PACKAGES/ insights-client/}"
fi

dnf install -y $TEST_PACKAGES $COCKPIT_DEPS $IPA_CLIENT_PACKAGES

# we only need cloud-init for the initial boot, afterwards it just slows down booting
if rpm -q cloud-init; then
    dnf remove -y cloud-init
fi

# If the insights-client is installed, update the insights-client
# "egg" and make sure that only the newest one is used.
#
# Running "insights-client --status" will download the newest egg to
# /var/lib/insights (and then output some status that we are not
# really interested in).
#
# Normally, newest.egg is then copied automatically to last_stable.egg
# once it has successfully been used once.
#
# But the idea is here that we only want to ever run newest.egg and if
# it is broken, we want to know about that, instead of having the
# insights-client fall back to an older egg. Thus, we promote
# newest.egg to last_stable.egg unconditionally and immediately.
# Removing rpm.egg takes that fallback out of the equation, too.
#
# Also, "insights-client --version" only looks at last_stable.egg or
# rpm.egg, never at newest.egg. So copying newest.egg to
# last_stable.egg makes that work as expected, too.

if [ -x /usr/bin/insights-client ]; then
    insights-client --status --verbose || true
    if [ -f /var/lib/insights/newest.egg ]; then
        cp /var/lib/insights/newest.egg /var/lib/insights/last_stable.egg
        cp /var/lib/insights/newest.egg.asc /var/lib/insights/last_stable.egg.asc
        rm -f /etc/insights-client/rpm.egg /etc/insights-client/rpm.egg.asc
    fi
    insights-client --version
fi

# Pre-install cockpit packages from base, to check for API breakages
# and more convenient interactive debugging
dnf --setopt=install_weak_deps=False install -y cockpit

# For debugging udisks/storaged crashes
debuginfo-install -y udisks2

# Prepare for building

# only install mock and build if DO_BUILD is 1
if [ "$DO_BUILD" -eq 1 ]; then
    if [ "${IMAGE#rhel-*}" != "$IMAGE" ]; then
        dnf install -y rpm-build

        # in RHEL 8, install mock from EPEL
        if [ "${IMAGE#rhel-8*}" != "$IMAGE" ]; then
            dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
            dnf install -y mock
            dnf config-manager --set-disabled epel
        elif [ "${IMAGE#rhel-9*}" != "$IMAGE" ]; then
            # RHEL 9 has no EPEL yet, install from Fedora 34
            cat <<EOF > /etc/yum.repos.d/fedora.repo
[fedora]
name=Fedora
baseurl=http://download.fedoraproject.org/pub/fedora/linux/development/34/Everything/\$basearch/os/
enabled=1
gpgcheck=0
EOF
            dnf install -y --setopt=install_weak_deps=False mock
            rm  /etc/yum.repos.d/fedora.repo
        else
            echo "Unknown RHEL version $IMAGE for building mock" >&2
            exit 1
        fi

        case "$IMAGE" in
            rhel-8-3) REPO="rhel-8.3.1-build" ;;
            rhel-8-4) REPO="rhel-8.4.0-build" ;;
            rhel-8-5) REPO="rhel-8.5.0-build" ;;
            rhel-9-0) REPO="rhel-9.0.0-alpha-build" ;;
            *) echo "Unknown image $IMAGE"; exit 1
        esac

        cat <<EOF > /etc/mock/default.cfg
config_opts['chroothome'] = '/builddir'
config_opts['use_host_resolv'] = False
config_opts['basedir'] = '/var/lib/mock'
config_opts['rpmbuild_timeout'] = 86400
config_opts['yum.conf'] = '[main]\\ncachedir=/var/cache/yum\\ndebuglevel=1\\nlogfile=/var/log/yum.log\\nreposdir=/dev/null\\nretries=20\\nobsoletes=1\\ngpgcheck=0\\nassumeyes=1\\nkeepcache=1\\ninstall_weak_deps=0\\nstrict=1\\n\\n# repos\\n\\n[build]\\nname=build\\nbaseurl=http://download.devel.redhat.com/brewroot/repos/$REPO/latest/x86_64/\\n'
config_opts['chroot_setup_cmd'] = 'groupinstall build'
config_opts['target_arch'] = 'x86_64'
config_opts['root'] = u'rhel-candidate-x86_64'

config_opts['macros']['%_topdir'] = '/builddir/build'
config_opts['macros']['%_rpmfilename'] = '%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm'
EOF
    elif [ "${IMAGE#centos-8*}" != "$IMAGE" ]; then
        # install mock from EPEL
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
        dnf install -y rpm-build mock
        dnf config-manager --set-disabled epel

        # build mock for CentOS 8 stream repo
        ln -sf centos-stream-8-x86_64.cfg /etc/mock/default.cfg
    fi

    useradd -c Builder -G mock builder
    opsys=$(cut -d '-' -f 1 <<< "$IMAGE")
    version=$(cut -d '-' -f 2 <<< "$IMAGE")
    su builder -c "/usr/bin/mock --verbose -i $(/var/lib/testvm/build-deps.sh "$opsys $version")"
    su builder -c "/usr/bin/mock --install --verbose rpmlint"
fi

dnf clean all || true

# For the D-Bus test server
if type "firewall-cmd" >/dev/null 2>&1; then
    FIREWALL_STATE=$(firewall-cmd --state || true)
    if [ "$FIREWALL_STATE" == "running" ]; then
        firewall-cmd --permanent --add-port 8765/tcp
    fi
fi

echo 'NETWORKING=yes' > /etc/sysconfig/network

# built from a cloud image, set up network-scripts for eth1 to avoid long boot hang on
# NetworkManager-wait-online.service
printf 'BOOTPROTO=none\nDEVICE=eth1\nONBOOT=no\n' > /etc/sysconfig/network-scripts/ifcfg-eth1
# our cloud-init.iso does not set up the host name
echo "127.0.1.1 $(hostname)" >> /etc/hosts

if ! getent passwd admin >/dev/null; then
    useradd -c Administrator -G wheel admin
    echo foobar | passwd --stdin admin
fi

# To enable persistent logging
mkdir -p /var/log/journal

/var/lib/testvm/zero-disk.setup --keep-mock-cache

# HACK - kdump.service interferes with our storage tests, by loading
# the system for some time after boot and thereby causing a race
# between parted and udevd to turn out for the worse.  Disabling
# kdump.service helps somewhat, but the race is still there, and
# parted still fails occasionally.
#
# https://bugzilla.redhat.com/show_bug.cgi?id=1245144
# Fixed in parted-3.1-23.el7
#
systemctl disable kdump.service

# Final tweaks

rm -rf /var/log/journal/*
# RHEL 7 does not enable systemd-coredump by default, later versions do
if ! grep -qr core_pattern /usr/lib/sysctl.d/; then
    echo "kernel.core_pattern=|/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e" > /etc/sysctl.d/50-coredump.conf
fi

# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /etc/ssh/sshd_config

# Audit events to the journal
if [ ! -f /root/.keep-audit ]; then
    rm -f '/etc/systemd/system/multi-user.target.wants/auditd.service'
    rm -rf /var/log/audit/
else
    echo "Keeping audit enabled as /root/.keep-audit exists"
fi
