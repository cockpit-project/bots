#!/bin/bash

set -e
IMAGE="$1"

# HACK - virt-resize might not be able to resize our xfs rootfs,
# depending on how it was compiled and which plugins are installed,
# and will just silently not do it.  So we do it here.
#
df --output=source,fstype / | tail -n1 | while read source fstype; do
    case $fstype in
    ext*)
	    resize2fs $source
	    ;;
    xfs*)
	    xfs_growfs /
	    ;;
    esac
done

df -Th /

# If the file /root/.skip_repos is present on the machine,
# all actions regarding the repositories will be skipped:
# subscriptions, adding repos, deleting existing entries
SKIP_REPO_FLAG="/root/.skip_repos"

# Only start logging here.  Otherwise the subscription credentials
# appear in the output above.
#
set -x

if [ ! -f "$SKIP_REPO_FLAG" ]; then
    # Configure repositories.

    if [ -n "$BASEOS_REPO_URL" -a -n "$APPSTREAM_REPO_URL" ]; then
    # disable all default repos
    rm -f --verbose /etc/yum.repos.d/*.repo
cat <<EOF > /etc/yum.repos.d/rel-eng.repo
[RHEL-BaseOS]
name=rhel-baseos
baseurl=$BASEOS_REPO_URL
enabled=1
gpgcheck=0

[RHEL-AppStream]
name=rhel-appstream
baseurl=$APPSTREAM_REPO_URL
enabled=1
gpgcheck=0
EOF

    elif [ "${IMAGE#rhel-*}" != "$IMAGE" ]; then
        # download.devel uses RH internal certificate
        curl -o /etc/pki/ca-trust/source/anchors/IT-Root-CA.pem https://certs.corp.redhat.com/certs/2022-IT-Root-CA.pem
        update-ca-trust

        VERSION=${IMAGE#rhel-}
        MAJOR=${VERSION%%-*}
        VERSION=${VERSION/-/.}
        # current development version uses /nightly, released ones /rel-eng + updates
        case "$VERSION" in
            10.0)
                VERSION=10
                RELSUFFIX="-Public-Beta"
                TREE=nightly;
                UPDATES="" ;;

            # drop 9.5 after official release
            9.5 | 9.6)
                TREE=nightly;
                UPDATES="" ;;
            *)
                TREE=rel-eng
                UPDATES="rhel-${MAJOR}/${TREE}/updates/RHEL-${MAJOR}/latest-RHEL-${VERSION}.0/compose" ;;
        esac

        REPO="rhel-${MAJOR}/${TREE}/RHEL-${MAJOR}${RELSUFFIX:-}/latest-RHEL-${VERSION}.0/compose"

        cat <<EOF > /etc/yum.repos.d/devel.repo
[RHEL-BaseOS]
name=baseos
baseurl=http://download.devel.redhat.com/$REPO/BaseOS/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-AppStream]
name=appstream
baseurl=http://download.devel.redhat.com/$REPO/AppStream/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-BaseOS-Debug]
name=baseos-debug
baseurl=http://download.devel.redhat.com/$REPO/BaseOS/x86_64/debug/tree/
enabled=0
gpgcheck=0

[RHEL-AppStream-Debug]
name=appstream-debug
baseurl=http://download.devel.redhat.com/$REPO/AppStream/x86_64/debug/tree/
enabled=0
gpgcheck=0
EOF

        [ -z "$UPDATES" ] || cat <<EOF >> /etc/yum.repos.d/devel.repo

[RHEL-BaseOS-Updates]
name=baseos-updates
baseurl=http://download.devel.redhat.com/$UPDATES/BaseOS/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-AppStream-Updates]
name=appstream-updates
baseurl=http://download.devel.redhat.com/$UPDATES/AppStream/x86_64/os/
enabled=1
gpgcheck=0

[RHEL-BaseOS-Debug-Updates]
name=baseos-debug-updates
baseurl=http://download.devel.redhat.com/$UPDATES/BaseOS/x86_64/debug/tree/
enabled=0
gpgcheck=0

[RHEL-AppStream-Debug-Updates]
name=appstream-debug-updates
baseurl=http://download.devel.redhat.com/$UPDATES/AppStream/x86_64/debug/tree/
enabled=0
gpgcheck=0
EOF
    fi

    # make ipa-client available on RHEL-8
    if [ "${IMAGE#rhel-8*}" != "$IMAGE" ]; then
        dnf module enable -y idm:client
    fi

    # see centos-10.bootstrap: development composes still lack cloud images, but production
    # composes are way too infrequent and outdated
    if [ "$IMAGE" = "centos-10" ]; then
        cat <<EOF > /etc/yum.repos.d/devel.repo
[baseos]
name=CentOS Stream 10 - BaseOS
baseurl=https://composes.stream.centos.org/stream-10/development/latest-CentOS-Stream/compose/BaseOS/x86_64/os/
gpgcheck=0
repo_gpgcheck=0
metadata_expire=6h
countme=1
enabled=1

[appstream]
name=CentOS Stream $releasever - AppStream
baseurl=https://composes.stream.centos.org/stream-10/development/latest-CentOS-Stream/compose/AppStream/x86_64/os/
gpgcheck=0
repo_gpgcheck=0
metadata_expire=6h
countme=1
enabled=1
EOF
    fi
fi

# man-db cache update is a CPU/memory hog
rpm -e --verbose man-db

dnf -y update

printf 'dictcheck = 0\nminlen = 6\n' >> /etc/security/pwquality.conf

echo foobar | passwd --stdin root

# We install all dependencies of the cockpit packages since we want
# them to not spontaneously change from one test run to the next when
# the distribution repository is updated.
COCKPIT_DEPS="\
device-mapper-multipath \
firewalld \
glib-networking \
json-glib \
libvirt-dbus \
libvirt-client \
libvirt-daemon-kvm \
NetworkManager-team \
openssl \
PackageKit \
pcp-libs \
pcp \
python3-pcp \
podman \
realmd \
redhat-logos \
setroubleshoot-server \
subscription-manager \
sos \
stratis-cli \
stratisd \
tuned \
udisks2 \
udisks2-lvm2 \
udisks2-iscsi \
/usr/bin/kdumpctl \
"

# We also install the packages necessary to join a FreeIPA domain so
# that we don't have to go to the network during a test run.
# on epel/rhel we have ipa-client instead of freeipa-client
IPA_CLIENT_PACKAGES="\
ipa-client \
oddjob \
oddjob-mkhomedir \
sssd \
sssd-dbus \
"

TEST_PACKAGES="\
acl \
boom-boot \
clevis-luks \
cryptsetup \
dhcp-client \
dnf-automatic \
dnf-utils \
dracut-fips \
gdb \
glibc-all-langpacks \
kmod-kvdo \
kpatch \
kpatch-dnf \
libvirt-daemon-config-network \
ltrace \
nmap-ncat \
qemu-kvm \
socat \
strace \
tang \
targetcli \
tcsh \
tlog \
valgrind \
valkey \
vdo \
virt-install \
wireguard-tools \
"

if [ "${IMAGE#rhel*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES} subscription-manager-cockpit insights-client"
fi

# wireguard-tools not available on rhel-8*
if [ "${IMAGE#rhel-8*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/wireguard-tools /}"
fi

# RHEL 8 still uses the C pcp bridge
if [ "${IMAGE#rhel-8*}" != "$IMAGE" ]; then
    COCKPIT_DEPS="${COCKPIT_DEPS/python3-pcp /}"
fi

# vdo not available on centos/rhel 10
if  [ "$IMAGE" = "centos-10" ] || [ "${IMAGE#rhel-10}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/ kmod-kvdo / }"
    TEST_PACKAGES="${TEST_PACKAGES/ vdo / }"
fi

# NM-team dropped in RHEL 10
if  [ "$IMAGE" = "centos-10" ] || [ "${IMAGE#rhel-10*}" != "$IMAGE" ]; then
    COCKPIT_DEPS="${COCKPIT_DEPS/ NetworkManager-team / }"
fi

# no dhcp-client in RHEL 10
if  [ "$IMAGE" = "centos-10" ] || [ "${IMAGE#rhel-10*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/ dhcp-client / }"
fi

if [ "${IMAGE#rhel-9*}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES} zram-generator"
fi

# RHEL 8/9 had redis
if [ "${IMAGE#rhel-[89]}" != "$IMAGE" ] || [ "${IMAGE#centos-[89]}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/ valkey / }"
    TEST_PACKAGES="$TEST_PACKAGES redis"
fi

# RHEL 8/9 had tracer
if [ "${IMAGE#rhel-[89]}" != "$IMAGE" ] || [ "${IMAGE#centos-[89]}" != "$IMAGE" ]; then
    TEST_PACKAGES="$TEST_PACKAGES python3-tracer"
fi

# These packages are downloaded to the image so that the tests can
# install them on-demand.

PACKAGE_SET_CLEVIS="\
clevis-systemd
clevis-dracut
"

PACKAGE_SET_STRATIS="\
stratisd
"

dnf install -y $TEST_PACKAGES $COCKPIT_DEPS $IPA_CLIENT_PACKAGES

# HACK: wireguard-tools pulls in systemd-resolved, but installing that doesn't start the service,
# thus breaking DNS; https://issues.redhat.com/browse/RHEL-37686
if  [ "$IMAGE" = "centos-10" ] || [ "${IMAGE#rhel-10*}" != "$IMAGE" ]; then
    systemctl start systemd-resolved
fi

mkdir -p /var/lib/package-sets/clevis
dnf download --downloaddir=/var/lib/package-sets/clevis $PACKAGE_SET_CLEVIS

mkdir -p /var/lib/package-sets/stratis
dnf download --downloaddir=/var/lib/package-sets/stratis $PACKAGE_SET_STRATIS

# we only need cloud-init for the initial boot, afterwards it just slows down booting
if rpm -q cloud-init; then
    dnf remove -y cloud-init
fi

# If the insights-client is installed, update the insights-client
# "egg" and make sure that only the newest one is used.
#
# Running "insights-client --status" will download the newest egg to
# /var/lib/insights (and then output some status that we are not
# really interested in).
#
# Normally, newest.egg is then copied automatically to last_stable.egg
# once it has successfully been used once.
#
# But the idea is here that we only want to ever run newest.egg and if
# it is broken, we want to know about that, instead of having the
# insights-client fall back to an older egg. Thus, we promote
# newest.egg to last_stable.egg unconditionally and immediately.
# Removing rpm.egg takes that fallback out of the equation, too.
#
# Also, "insights-client --version" only looks at last_stable.egg or
# rpm.egg, never at newest.egg. So copying newest.egg to
# last_stable.egg makes that work as expected, too.

if [ -x /usr/bin/insights-client ]; then
    rpm -q insights-client
    if [ "${IMAGE#rhel-10}" != "$IMAGE" ]; then
        insights-client --version || true  # Errors on RHEL-10
    else
        insights-client --version
    fi
    insights-client --status || true
    if [ -f /var/lib/insights/newest.egg ]; then
        cp /var/lib/insights/newest.egg /var/lib/insights/last_stable.egg
        cp /var/lib/insights/newest.egg.asc /var/lib/insights/last_stable.egg.asc
        rm -f /etc/insights-client/rpm.egg /etc/insights-client/rpm.egg.asc
        restorecon -vR /var/lib/insights
    fi
fi

# Pre-install cockpit packages from base, to check for API breakages
# and more convenient interactive debugging
dnf --setopt=install_weak_deps=False install -y cockpit

# For debugging udisks/storaged crashes
if [ "${IMAGE#rhel}" != "$IMAGE" ]; then
    debuginfo-install -y udisks2
fi

# Prepare for building

# only install mock and build if DO_BUILD is 1
if [ "$DO_BUILD" -eq 1 ]; then
    # install mock from EPEL
    major=$(cut -d '-' -f 2 <<< "$IMAGE")
    minor=$(cut -d '-' -f 3 <<< "$IMAGE")
    dnf install -y rpm-build

    if [ "${IMAGE#rhel-10*}" != "$IMAGE" ] || [ "${IMAGE#centos-10}" != "$IMAGE" ]; then
        # RHEL 10 has no EPEL yet, install from Fedora 40
        cat <<EOF > /etc/yum.repos.d/fedora.repo
[fedora]
name=Fedora
metalink=https://mirrors.fedoraproject.org/metalink?repo=fedora-40&arch=\$basearch
enabled=1
gpgcheck=0

[fedora-updates]
name=Fedora
metalink=https://mirrors.fedoraproject.org/metalink?repo=updates-released-f40&arch=\$basearch
enabled=1
gpgcheck=0
EOF
        dnf install -y --setopt=install_weak_deps=False mock
        rm  /etc/yum.repos.d/fedora.repo
    else
        # RHEL/CentOS 8/9 has EPEL
        dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-${major}.noarch.rpm
        dnf install -y mock
        dnf config-manager --set-disabled epel
    fi

    if [ "${IMAGE#rhel-*}" != "$IMAGE" ]; then
        if [ "${IMAGE#rhel-10}" != "$IMAGE" ]; then
            zversion="-beta"
        else
            zversion=".0"
        fi
        cat <<EOF > /etc/mock/default.cfg
config_opts['chroothome'] = '/builddir'
config_opts['use_host_resolv'] = False
config_opts['basedir'] = '/var/lib/mock'
config_opts['rpmbuild_timeout'] = 86400
config_opts['yum.conf'] = '[main]\\ncachedir=/var/cache/yum\\ndebuglevel=1\\nlogfile=/var/log/yum.log\\nreposdir=/dev/null\\nretries=20\\nobsoletes=1\\ngpgcheck=0\\nassumeyes=1\\nkeepcache=1\\ninstall_weak_deps=0\\nstrict=1\\n\\n# repos\\n\\n[build]\\nname=build\\nbaseurl=http://download.devel.redhat.com/brewroot/repos/rhel-${major}.${minor}${zversion}-build/latest/x86_64/\\nmodule_hotfixes=1\\n'
config_opts['chroot_setup_cmd'] = 'groupinstall build'
config_opts['target_arch'] = 'x86_64'
config_opts['root'] = u'rhel-candidate-x86_64'

config_opts['macros']['%_topdir'] = '/builddir/build'
config_opts['macros']['%_rpmfilename'] = '%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm'
EOF
    elif [ "${IMAGE#centos-*}" != "$IMAGE" ]; then
        # build mock for CentOS stream repo
        ln -sf centos-stream-${major}-x86_64.cfg /etc/mock/default.cfg
    fi

    # HACK: SELinux b0rkage https://issues.redhat.com/browse/RHEL-49567
    if [ "${IMAGE#rhel-10*}" != "$IMAGE" ] || [ "${IMAGE#centos-10}" != "$IMAGE" ]; then
        setenforce 0
    fi

    useradd -c Builder -G mock builder
    opsys=$(cut -d '-' -f 1 <<< "$IMAGE")
    version=$(cut -d '-' -f 2 <<< "$IMAGE")
    su builder -c "/usr/bin/mock --verbose --no-bootstrap-image -i $(/var/lib/testvm/build-deps.sh "$opsys $version")"

    # We need to make sure mock has the same selinux-policy as we do
    mkdir /tmp/selinux-policy-rpms
    dnf download --downloaddir /tmp/selinux-policy-rpms selinux-policy{,-devel,-targeted}
    su builder -c "/usr/bin/mock --install /tmp/selinux-policy-rpms/*.rpm"

    # undo the hack above
    if [ "${IMAGE#rhel-10*}" != "$IMAGE" ] || [ "${IMAGE#centos-10}" != "$IMAGE" ]; then
        setenforce 1
    fi
fi

dnf clean all || true

# disable second eth to avoid long boot hang on NetworkManager-wait-online.service
# cover kernel and systemd interface names
for iface in eth1 ens15; do
    if [ -e /sys/class/net/$iface ]; then
        nmcli con add con-name $iface ifname $iface type ethernet ipv4.method disabled ipv6.method ignore
    fi
done

# our cloud-init.iso does not set up the host name
echo "127.0.1.1 $(hostname)" >> /etc/hosts

if ! getent passwd admin >/dev/null; then
    useradd -c Administrator -G wheel admin
    echo foobar | passwd --stdin admin
fi

# HACK - something creates ~admin/.ssh with bogus permissions and
# ownership, maybe cloud-init.  Undo that.

if [ -d ~admin/.ssh ]; then
    chmod 0700 ~admin/.ssh
    chown admin:admin ~admin/.ssh
fi

# To enable persistent logging
mkdir -p /var/log/journal

/var/lib/testvm/podman-images.setup

rm -f /etc/pki/ca-trust/source/anchors/IT-Root-CA.pem

# Final tweaks

# RHEL 7 does not enable systemd-coredump by default, later versions do
if ! grep -qr core_pattern /usr/lib/sysctl.d/; then
    echo "kernel.core_pattern=|/usr/lib/systemd/systemd-coredump %p %u %g %s %t %e" > /etc/sysctl.d/50-coredump.conf
fi

# Enable coredumps so we have better journal messages for reports and naughties
mkdir -p /etc/systemd/system.conf.d/
printf '[Manager]\nDefaultLimitCORE=infinity:infinity\n' > /etc/systemd/system.conf.d/50-coredump.conf

# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /etc/ssh/sshd_config

# pmlogger.service sometimes causes long shutdown hangs; disable all PCP services and timers
systemctl --all --legend=false list-units 'pm*' | awk '{print $1}' | xargs --no-run-if-empty systemctl disable

# clean up old kernels after upgrading
dnf repoquery --installonly --latest-limit=-1 -q | xargs --no-run-if-empty rpm -e --verbose

# Fix the SELinux contexts for all the paths that were created/edited so far
restorecon -vR /etc/

if [ "${IMAGE#rhel-10*}" != "$IMAGE" ] || [ "${IMAGE#centos-10}" != "$IMAGE" ]; then
  # Disable PerSourcePenalties, they interfere with the rapid failed
  # logins performed by some tests.
  echo "PerSourcePenalties no" >/etc/ssh/sshd_config.d/99-no-penalties.conf
fi

/var/lib/testvm/zero-disk.setup --keep-mock-cache
