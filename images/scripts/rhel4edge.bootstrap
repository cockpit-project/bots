#!/bin/sh
set -eux

BASE=$(dirname $0)
SSH_KEY_PUB=$(cat $BASE/../../machine/identity.pub)
# Names need to be unique
timestamp=$(date +%s)

# check-system-terminal in cockpit requires `clear` command so install ncurses
cat > edge-request.json <<EOF
{
  "name": "rhel4edge-$timestamp",
  "distribution": "rhel-92",
  "imageType": "rhel-edge-installer",
  "packages": [
    { "name": "cockpit-system" },
    { "name": "insights-client" },
    { "name": "ncurses" },
    { "name": "openssh-server" },
    { "name": "socat" },
    { "name": "sscg" },
    { "name": "sssd-common" },
    { "name": "subscription-manager-cockpit" }
  ],
  "outputTypes": [
    "rhel-edge-installer",
    "rhel-edge-commit"
  ],
  "commit": {
    "arch": "x86_64"
  },
  "installer": {
    "username": "admin",
    "sshkey": "$SSH_KEY_PUB"
  }
}
EOF

# File `/secrets/crc_passwd` contains the following line
# machine console.redhat.com login <username> password <password>

response=$(curl --netrc-file /secrets/crc_passwd --json @edge-request.json https://console.redhat.com/api/edge/v1/images)

ID=$( echo "$response" | jq -r ".ID" )
STATUS=$( echo "$response" | jq -r ".Status" )

# Building takes around 30 minutes, just do long sleeps
while [ "$STATUS" == "BUILDING" ]
do
    sleep 5m
    STATUS=$(curl --netrc-file /secrets/crc_passwd https://console.redhat.com/api/edge/v1/images/$ID/status | jq -r ".Status")
done

if [ "$STATUS" != "SUCCESS" ]; then
    echo "Failed to build rhel4edge-$timestamp"
    exit 1
fi
ISO_FILE="rhel4edge-$timestamp.iso"
curl --netrc-file /secrets/crc_passwd -L "https://console.redhat.com/api/edge/v1/storage/isos/$ID" -o "$ISO_FILE"

# ==========================================
# customize fleet.ks file inside ISO, to be able to do installation without user interaction
DIR_NAME=$(mktemp -d -p $BASE)
FLEET_FILE="$DIR_NAME/fleet.ks"

mv "$ISO_FILE" "$DIR_NAME/fleet_source.iso"
chmod 775 "$DIR_NAME"
# extract fleet.ks to directory
xorriso -osirrox on -indev "$DIR_NAME/fleet_source.iso" -extract /fleet.ks "$DIR_NAME/fleet.ks"
# this is important to do for automatic installation
sed -i "/network --boot/a rootpw --lock" "$DIR_NAME/fleet.ks"

curl -L "https://raw.githubusercontent.com/loadtheaccumulator/fleet-iso-util/main/fleetkick.sh" -o "$DIR_NAME/fleetkick.sh"
chmod a+x "$DIR_NAME/fleetkick.sh"
# change workdir in script (it is used inside podman, so it expects specific path)
sed -i "s@BASEDIR=.*@BASEDIR='$DIR_NAME'@" "$DIR_NAME/fleetkick.sh"
mkdir "$DIR_NAME/workdir"

$DIR_NAME/fleetkick.sh -w "$DIR_NAME/workdir"

mv -f "$DIR_NAME/fleet_out.iso" "$ISO_FILE"
rm -rf "$DIR_NAME"
# ==========================================

$BASE/virt-install-rhel4edge "$1" x86_64 "$ISO_FILE"

rm -f edge-request.json "$ISO_FILE"
