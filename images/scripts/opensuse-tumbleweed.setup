#!/bin/bash

set -ex
IMAGE="$1"

. /etc/os-release

# avoid failures when running image builds in a non-English locale (ssh transfers the host environment)
unset LANGUAGE
unset LANG
export LC_ALL=C.utf8

# make libpwquality less aggressive, so that our "foobar" password works
printf 'dictcheck = 0\nminlen = 6\n' >> /etc/security/pwquality.conf

. /etc/os-release
# We install all dependencies of the cockpit packages since we want
# them to not spontaneously change from one test run to the next when
# the distribution repository is updated.
#
COCKPIT_DEPS="\
criu \
libcriu2 \
device-mapper \
glibc-locale \
glib-networking \
json-glib \
kexec-tools \
libssh2-1 \
libvirt-daemon-config-network \
libvirt-daemon-driver-qemu \
libvirt-daemon-driver-network \
libvirt-daemon-driver-nodedev \
libvirt-daemon-driver-storage-core \
libvirt-daemon-driver-storage-disk \
libvirt-daemon-qemu \
libvirt-client \
libvirt-dbus \
openssl \
PackageKit \
pcp \
pcp-devel \
python3-pip \
qemu-block-curl \
qemu-chardev-spice \
qemu-hw-usb-host \
qemu-hw-usb-redirect \
qemu-kvm \
realmd \
tuned \
virt-install \
virtiofsd \
udisks2 \
libudisks2-0_lvm2 \
"

TEST_PACKAGES="\
acl \
ansible-core \
clevis-luks \
cryptsetup \
firewalld \
gdb \
gettext \
gvfs \
libvirt-daemon-driver-storage-iscsi \
libvirt-daemon-driver-storage-iscsi-direct \
libvirt-daemon-driver-storage-logical \
libxml2-tools \
ltrace \
nginx \
podman \
redis \
socat \
strace \
targetcli \
tcsh \
bzip2 \
rpm-build \
rpm-config-SUSE \
psmisc \
"

NETWORK_PACKAGES="\
sssd \
sssd-dbus \
"

# avoid NM-wait-online hanging on disconnected interfaces
mkdir -p /etc/NetworkManager/conf.d/
printf '[main]\nno-auto-default=*\n' > /etc/NetworkManager/conf.d/noauto.conf

# our cloud-init.iso does not set up the host name
echo "127.0.1.1 $(hostname)" >> /etc/hosts

if [ "${IMAGE%-i386}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/podman /}"
fi

zypper dup -y
# kernel-default has more kernel modules that are required for testing
zypper remove -y kernel-default-base
zypper install -y kernel-default

zypper install -y $TEST_PACKAGES $COCKPIT_DEPS $BUILD_PACKAGES $NETWORK_PACKAGES


# Pre-install distribution cockpit packages, for testing cockpit extensions offline and for convenient interactive debugging
zypper install -y cockpit

zypper addrepo https://download.opensuse.org/repositories/system:packagemanager/openSUSE_Tumbleweed/system:packagemanager.repo
zypper --non-interactive --gpg-auto-import-keys  refresh
zypper install -y mock mock-core-configs sudo

echo "%wheel ALL=(ALL) ALL" > /etc/sudoers.d/90-cockpit-wheel
echo "builder ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/90-susebuild
useradd -c Builder -G mock builder

su builder -c "sudo mock --verbose -i $(/var/lib/testvm/build-deps.sh "${ID} ${VERSION_ID}")"

# Cloud init creates sshd_config to a wrong path so it needs to be removed
rm -r /etc/ssh/sshd_config
# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /usr/etc/ssh/sshd_config
# Cloud init sets 'PasswordAuthentication yes'. Make sure it's replicated in tumbleweed
echo 'PasswordAuthentication yes' >> /usr/etc/ssh/sshd_config

# Audit events to the journal
rm -f '/etc/systemd/system/multi-user.target.wants/auditd.service'
rm -rf /var/log/audit/

# Make sure firewalld is enabled
systemctl enable --now firewalld

echo root:foobar | chpasswd

# cloud-init is not needed after initial setup and will only slow down boot time
# and it trying to re-setup networking on every boot can cause network issues
zypper remove -y cloud-init

# Display the boot messages for easier debugging
echo 'GRUB_CMDLINE_LINUX_DEFAULT=""' >> /etc/default/grub
echo 'GRUB_CMDLINE_LINUX="no_timer_check net.ifnames=0 console=tty1 console=ttyS0,115200n8"' >> /etc/default/grub
grub2-mkconfig -o /boot/grub2/grub.cfg

# reduce image size
zypper clean

# c-podman tests
/var/lib/testvm/podman-images.setup

/var/lib/testvm/zero-disk.setup
