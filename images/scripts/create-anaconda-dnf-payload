#!/usr/bin/env python3
# This file is part of Cockpit.
#
# Copyright (C) 2025 Red Hat, Inc.
#
# Licensed under the GNU Lesser General Public License v2.1 or later.

# create-anaconda-dnf-payload  -- Create a DNF payload bundle for anaconda tests.
# The output is a directory containing:
#   repo/ (seeded for the Fedora version)

import argparse
import os
import subprocess
import xml.etree.ElementTree as ET

from lib.constants import BOTS_DIR
from machine import testvm


def run(cmd: list[str]) -> None:
    subprocess.check_call(cmd)


def parse_required_packages_from_comps(comps_path: str) -> str:
    """Return a space-separated list of required package names from a comps.xml file.

    Considers only mandatory and default entries.
    """
    names: set[str] = set()
    wanted = {"core", "critical-path-base", "anaconda-tools"}
    root = ET.parse(comps_path).getroot()
    for group in root.findall("group"):
        group_id = (group.findtext("id") or "").strip()
        if group_id not in wanted:
            continue
        pkg_list = group.find("packagelist")
        if pkg_list is None:
            continue
        for req in pkg_list.findall("packagereq"):
            req_type = req.get("type", "")
            if req_type in ("mandatory", "default") and req.text:
                names.add(req.text.strip())
    return " ".join(sorted(names))


def download_packages_on_guest(machine: testvm.VirtMachine, baseurl: str, destdir: str, packages: str) -> None:
    """Download the given packages and dependencies into destdir using dnf5 on the guest."""
    if not packages:
        return
    machine.execute(
        f"dnf5 -y --disablerepo='*' --repofrompath=base,{baseurl} --enablerepo=base --forcearch=x86_64 "
        f"download --resolve --alldeps --destdir '{destdir}' {packages}",
        timeout=3600,
    )


def build_dnf_payload(image: str, output: str) -> None:
    fedora_version = image.split('-')[1]

    run([os.path.join(BOTS_DIR, "image-download"), image])
    machine = testvm.VirtMachine(image=image, memory_mb=4096)
    try:
        machine.start()
        machine.wait_boot()
        machine.execute("dnf install -y createrepo_c", timeout=300)

        # Ensure target repo directory exists
        target = "/srv/repo"
        machine.execute(f"install -d -m 0755 '{target}'", timeout=60)

        # Upload comps.xml
        comps_local = os.path.join(BOTS_DIR, "images/scripts/lib/anaconda-comps.xml")
        machine.upload([comps_local], f"{target}/comps.xml")

        baseurl = f"https://dl.fedoraproject.org/pub/fedora/linux/development/{fedora_version}/Everything/x86_64/os/"
        machine.execute(
            f"dnf5 -y --disablerepo='*' --repofrompath=base,{baseurl} --enablerepo=base --forcearch=x86_64 makecache",
            timeout=600,
        )

        # Compute package list from comps and download into repo
        packages = parse_required_packages_from_comps(comps_local)
        download_packages_on_guest(machine, baseurl, target, packages)

        # Create repo metadata embedding comps
        machine.execute(f"createrepo_c --groupfile '{target}/comps.xml' '{target}'", timeout=600)
        machine.execute(
            f"install -d -m 0755 '{target}/repodata' && cp -f '{target}/comps.xml' '{target}/repodata/comps.xml'",
            timeout=60
        )

        # Download repo directory
        machine.download_dir("/srv/repo", output)
    finally:
        machine.stop()


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument('--image', default='fedora-rawhide')
    parser.add_argument('--output', required=True)
    args = parser.parse_args()

    if not args.output:
        raise RuntimeError("Output path not specified")

    build_dnf_payload(args.image, args.output)


if __name__ == "__main__":
    main()
