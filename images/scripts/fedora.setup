#!/bin/bash

set -ex
IMAGE="$1"

# avoid failures when running image builds in a non-English locale (ssh transfers the host environment)
unset LANGUAGE
unset LANG
export LC_ALL=C.utf8

# make libpwquality less aggressive, so that our "foobar" password works
printf 'dictcheck = 0\nminlen = 6\n' >> /etc/security/pwquality.conf

echo foobar | passwd --stdin root

# We install all dependencies of the cockpit packages since we want
# them to not spontaneously change from one test run to the next when
# the distribution repository is updated.
#
COCKPIT_DEPS="\
device-mapper-multipath \
docker \
etcd \
glibc-all-langpacks \
glib-networking \
grubby \
json-glib \
kexec-tools \
libssh \
libvirt-daemon-kvm \
libvirt-client \
libvirt-dbus \
NetworkManager-team \
openssl \
PackageKit \
pcp \
pcp-libs \
python3-tracer \
qemu-system-x86-core \
realmd \
selinux-policy-targeted \
setroubleshoot-server \
sos \
sscg \
system-logos \
subscription-manager \
tuned \
virt-install \
udisks2 \
udisks2-lvm2 \
udisks2-iscsi \
"


# We also install the packages necessary to join a FreeIPA domain so
# that we don't have to go to the network during a test run.
#
IPA_CLIENT_PACKAGES="\
freeipa-client \
oddjob \
oddjob-mkhomedir \
sssd \
sssd-dbus \
libsss_sudo \
"

TEST_PACKAGES="\
ansible
systemtap-runtime-virtguest \
valgrind \
gdb \
strace \
ltrace \
targetcli \
dnf-automatic \
cryptsetup \
clevis-luks \
firewalld \
socat \
tang \
podman \
ntp \
libvirt-daemon-config-network \
tlog \
nginx \
tcsh \
"

ABRT_PACKAGES="\
abrt \
abrt-addon-ccpp \
reportd \
libreport-plugin-bugzilla \
libreport-fedora
"

if [ "$IMAGE" = "fedora-34" ]; then
    # ntp was replaced with ntpsec
    TEST_PACKAGES="${TEST_PACKAGES/ntp /}"
    TEST_PACKAGES="${TEST_PACKAGES} ntpsec"
fi

rm -rf /etc/sysconfig/iptables

echo 'NETWORKING=yes' > /etc/sysconfig/network

# These build from a cloud image, set up network-scripts for eth1 to avoid long boot hang on
# NetworkManager-wait-online.service
if [ "$IMAGE" = "fedora-33" ] || [ "$IMAGE" = "fedora-testing" ] || [ "$IMAGE" = "fedora-34" ]; then
    printf 'BOOTPROTO=none\nDEVICE=eth1\nONBOOT=no\n' > /etc/sysconfig/network-scripts/ifcfg-eth1
    # our cloud-init.iso does not set up the host name
    echo "127.0.1.1 $(hostname)" >> /etc/hosts
fi

if ! getent passwd admin >/dev/null; then
    useradd -c Administrator -G wheel admin
    echo foobar | passwd --stdin admin
fi

if [ "${IMAGE%-i386}" != "$IMAGE" ]; then
    TEST_PACKAGES="${TEST_PACKAGES/podman /}"
fi

if [ "${IMAGE%-testing}" != "$IMAGE" ]; then
    dnf config-manager --set-enabled updates-testing
fi

dnf $DNF_OPTS -y upgrade
dnf $DNF_OPTS -y install $TEST_PACKAGES $COCKPIT_DEPS $IPA_CLIENT_PACKAGES $ABRT_PACKAGES

# Pre-install distribution cockpit packages, for testing cockpit extensions offline and for convenient interactive debugging
dnf --setopt=install_weak_deps=False install -y cockpit

# clean up old kernels
dnf remove --oldinstallonly -y || true
# also removes gcc and some -devel packages
dnf remove -y kernel-headers

dnf $DNF_OPTS -y install mock dnf-plugins-core rpm-build
useradd -c Builder -G mock builder

if [ "${IMAGE%-testing}" != "$IMAGE" ]; then
    # Enable updates-testing in mock
    echo "config_opts['dnf.conf'] += '[updates-testing]\nenabled=1'" >>/etc/mock/default.cfg
fi

opsys=$(cut -d '-' -f 1 <<< "$IMAGE")
version=$(cut -d '-' -f 2 <<< "$IMAGE")
# If version is not number (ie: testing) then use Fedora 33
if ! [ "$version" -eq "$version" ] 2>/dev/null; then version=33; fi

# don't use a bootstrap chroot to save time and space; everything is offline, and we always just do exactly one build
echo "config_opts['use_bootstrap'] = False" >>/etc/mock/site-defaults.cfg
su builder -c "/usr/bin/mock --no-bootstrap-chroot --verbose -i $(/var/lib/testvm/build-deps.sh "$opsys $version")"
su builder -c "/usr/bin/mock --install --verbose rpmlint"

/var/lib/testvm/podman-images.setup "$version"

ln -sf ../selinux/config /etc/sysconfig/selinux
printf "SELINUX=enforcing\nSELINUXTYPE=targeted\n" > /etc/selinux/config

# Prevent SSH from hanging for a long time when no external network access
echo 'UseDNS no' >> /etc/ssh/sshd_config

# For the D-Bus test server
systemctl start firewalld
firewall-cmd --permanent --add-port 8765/tcp

# Audit events to the journal
rm -f '/etc/systemd/system/multi-user.target.wants/auditd.service'
rm -rf /var/log/audit/

# reduce image size
dnf clean all
rm -rf /var/lib/mock/*-bootstrap
/var/lib/testvm/zero-disk.setup
