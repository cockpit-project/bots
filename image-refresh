#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2016 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import os
import subprocess
import sys
import time
import urllib.parse

import task
from lib import s3, stores, testmap
from lib.constants import BOTS_DIR, SCRIPTS_DIR

sys.dont_write_bytecode = True


def run(image, verbose=False, **kwargs):
    if not image:
        raise RuntimeError("no image specified")

    triggers = testmap.tests_for_image(image)

    # Cleanup any extraneous disk usage elsewhere
    subprocess.check_call([os.path.join(BOTS_DIR, "vm-reset")])

    # download the current image, for comparing them; that may not exist yet for newly introduced images
    if subprocess.call([os.path.join(BOTS_DIR, "image-download"), image]) == 0:
        old_image = os.path.realpath(os.path.join(BOTS_DIR, "images", image))
    else:
        old_image = None

    # create the new image
    cmd = [os.path.join(BOTS_DIR, "image-create"), "--verbose", "--capture-console", "--upload", image]
    os.environ['VIRT_BUILDER_NO_CACHE'] = "yes"
    result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    log = result.stdout
    if result.returncode == 0:
        # compare it to the previous one (on hosts we can ssh to)
        if old_image and os.path.exists(os.path.join(SCRIPTS_DIR, image + '.setup')):
            result = subprocess.run([os.path.join(BOTS_DIR, "image-diff"), old_image, image],
                                    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            log += result.stdout

    # upload the log to S3
    log_url = os.path.join(
        os.getenv('S3_LOGS_URL', stores.LOG_STORE),
        f"image-refresh-logs/{image}-{time.strftime('%Y%m%d-%H%M%M')}.log"
    )
    with s3.urlopen(urllib.parse.urlparse(log_url), data=log, method="PUT",
                    headers={"Content-Type": "text/plain", s3.ACL: s3.PUBLIC}):
        pass

    if result.returncode == 0:
        # create branch and push it
        branch = task.branch(image, "images: Update {0} image".format(image), pathspec="images", **kwargs)

        # trigger tests if it is not a pull request
        if branch and "pull" not in kwargs:
            pull = task.pull(branch, labels=['bot', 'no-test'], run_tests=False, **kwargs)

            # Trigger this pull request
            api = task.github.GitHub()
            head = pull["head"]["sha"]
            for trigger in triggers:
                api.post("statuses/{0}".format(head), {"state": "pending", "context": trigger,
                                                       "description": task.github.NOT_TESTED_DIRECT})

    return (result.returncode, log_url)


if __name__ == '__main__':
    task.main(function=run, title="Refresh image")
