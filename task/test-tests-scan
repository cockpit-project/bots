#!/usr/bin/env python3

# This file is part of Cockpit.
#
# Copyright (C) 2023 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import json
import os
import shutil
import subprocess
import tempfile
import unittest

from lib.constants import BOTS_DIR
from task import github
from task.test_mock_server import MockHandler, MockServer

ADDRESS = ("127.0.0.7", 9898)


GITHUB_DATA = {
    "/repos/project/repo": {
        "default_branch": "main"
    },
    "/repos/project/repo/issues/3333": {
        "title": "The issue title",
        "body": "Some bug\n - [ ] image-refresh foonux\n",
    },
    "/repos/project/repo/pulls/1": {
        "title": "PR title",
        "number": 1,
        "body": "This is the body",
        "base": {"ref": "abcdef"},
        "head": {"sha": "abcdef", "user": {"login": "cockpit-project"}},
        "labels": [],
    },
    "/repos/project/repo/commits/abcdef/status?page=1&per_page=100": {
        "state": "pending",
        "statuses": [],
        "sha": "abcdef",
    },
    # HACK: we can't change the test map dynamically when invoked via test-scan
    "/repos/cockpit-project/cockpit/commits/abcdef/status?page=1&per_page=100": {
        "state": "pending",
        "statuses": [],
        "sha": "abcdef",
    },
    "/users/user/repos": [{"full_name": "project/repo"}],
}


class Handler(MockHandler):
    def do_GET(self):
        if self.path in self.server.data:
            self.replyJson(self.server.data[self.path])
        elif self.path.startswith('/repos/project/repo/pulls/2'):
            self.replyJson([])
        elif self.path.startswith('/repos/project/repo/pulls'):
            self.replyJson([self.server.data['/repos/project/repo/pulls/1']])
        elif self.path == "/repos/cockpit-project/cockpit/commits/abcdef/pulls":
            self.replyJson([{"state": "closed"}])
        elif self.path == "/repos/cockpit-project/cockpit/commits/abcdef2/pulls":
            self.replyJson([{"state": "open"}])
        elif self.path.endswith("/issues"):
            issues = self.server.data.get('issues', [])
            self.replyJson(issues)
        else:
            self.send_error(404, 'Mock Not Found: ' + self.path)

    def do_POST(self):
        if self.path.startswith("/repos/cockpit-project/cockpit/issues"):
            content_len = int(self.headers.get('content-length'))
            data = json.loads(self.rfile.read(content_len).decode('utf-8'))
            self.server.data['issues'] = [data]
            self.replyJson(data)
        else:
            self.send_error(405, 'Method not allowed: ' + self.path)


class TestTestsScan(unittest.TestCase):
    def setUp(self):
        self.temp = tempfile.mkdtemp()
        self.server = MockServer(ADDRESS, Handler, GITHUB_DATA)
        self.server.start()
        self.repo = "project/repo"
        self.pull_number = "1"
        self.context = "fedora/nightly"
        self.revision = "abcdef"

    def tearDown(self):
        self.server.kill()
        shutil.rmtree(self.temp)

    def run_tests_scan(self, args):
        script = os.path.join(BOTS_DIR, "tests-scan")
        proc = subprocess.Popen([script, *args], stdout=subprocess.PIPE, universal_newlines=True,
                                env={"GITHUB_API": f"http://{ADDRESS[0]}:{ADDRESS[1]}"})
        output, stderr = proc.communicate()
        return proc, output, stderr

    def expected_command(self):
        return (f"./s3-streamer --repo {self.repo} --test-name pull-{self.pull_number}-\\d+-\\d+"
                f" --github-context {self.context} --revision {self.revision} -- /bin/sh -c"
                f" \"PRIORITY=0005 ./make-checkout --verbose --repo={self.repo} {self.revision}"
                f" && cd make-checkout-workdir && TEST_OS=fedora BASE_BRANCH={self.revision}"
                " COCKPIT_BOTS_REF=main TEST_SCENARIO=nightly ../tests-invoke --pull-number"
                f" {self.pull_number} --revision {self.revision} --repo {self.repo}\"")

    def expected_human_output(self, pull_number=None):
        if pull_number is None:
            pull_number = self.pull_number
        return (f"pull-{pull_number}      {self.context}            {self.revision}"
                f"     5.99999  ({self.repo}) [bots@main]")

    def test_pull_number(self):
        args = ["--dry", "--repo", self.repo, "--pull-number", self.pull_number,
                "--context", self.context]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_command()
        self.assertRegex(output, expected_output)
        self.assertIsNone(stderr)

    def test_unkown_pull_number(self):
        args = ["--dry", "--repo", self.repo, "--pull-number", "2", "--context", "fedora/nightly"]
        proc, _, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 1)
        self.assertIsNone(stderr)

    def test_pull_data(self):
        args = ["--dry", "--repo", self.repo, "--pull-data",
                json.dumps({'pull_request': GITHUB_DATA['/repos/project/repo/pulls/1']}),
                "--context", self.context]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_command()
        self.assertRegex(output, expected_output)
        self.assertIsNone(stderr)

    def test_no_arguments(self):
        args = ["--dry", "--repo", self.repo, "--context", self.context]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_command()
        self.assertRegex(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def test_pull_number_human_readable(self):
        args = ["--dry", "--repo", self.repo, "--pull-number", self.pull_number,
                "--context", self.context, "-v"]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_human_output()
        self.assertEqual(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def test_pull_data_human_readable(self):
        args = ["--dry", "--repo", self.repo, "--pull-data",
                json.dumps({'pull_request': GITHUB_DATA['/repos/project/repo/pulls/1']}),
                "--context", self.context, "-v"]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_human_output()
        self.assertEqual(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def test_no_arguments_human_readable(self):
        args = ["--dry", "--repo", self.repo, "--context", self.context, "-v"]
        proc, output, stderr = self.run_tests_scan(args)

        self.assertEqual(proc.returncode, 0)
        expected_output = self.expected_human_output()
        self.assertEqual(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def test_no_pull_request(self):
        repo = "cockpit-project/cockpit"
        args = ["--dry", "--sha", self.revision, "--repo", repo,
                "--context", self.context]
        proc, output, stderr = self.run_tests_scan(args)
        expected_output = (f"./s3-streamer --repo {repo} --test-name pull-\\d+-\\d+-\\d+"
                           f" --github-context {self.context} --revision {self.revision} -- /bin/sh -c"
                           f" \"PRIORITY=0006 ./make-checkout --verbose --repo={repo} --rebase=main {self.revision}"
                           f" && cd make-checkout-workdir && TEST_OS=fedora BASE_BRANCH=main"
                           " COCKPIT_BOTS_REF=main TEST_SCENARIO=nightly ../tests-invoke"
                           f" --revision {self.revision} --repo {repo}\"")

        self.assertEqual(proc.returncode, 0)
        self.assertRegex(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def test_no_pull_request_human(self):
        repo = "cockpit-project/cockpit"
        args = ["--dry", "--sha", self.revision, "--repo", repo,
                "--context", self.context, "-v"]
        proc, output, stderr = self.run_tests_scan(args)
        expected_output = (f"pull-0      {self.context}            {self.revision}"
                           f"     6.0  ({repo}) [bots@main]   {{main}}")

        self.assertEqual(proc.returncode, 0)
        self.assertEqual(output.strip(), expected_output)
        self.assertIsNone(stderr)

    def do_test_tests_invoke(self, attachments_url, expected_logs_url):
        repo = "cockpit-project/cockpit"
        args = ["--revision", self.revision, "--repo", repo]
        script = os.path.join(BOTS_DIR, "tests-invoke")
        with tempfile.TemporaryDirectory() as tempdir:
            testdir = f"{tempdir}/.cockpit-ci"
            os.makedirs(testdir)
            with open(f"{testdir}/run", "w") as fp:
                fp.write("#!/bin/bash\nexit 1")
            os.system(f"chmod +x {testdir}/run")
            proc = subprocess.Popen([script, *args], stdout=subprocess.PIPE, universal_newlines=True,
                                    env={"GITHUB_API": f"http://{ADDRESS[0]}:{ADDRESS[1]}",
                                         "TEST_INVOKE_SLEEP": "1", "TEST_OS": "fedora-38",
                                         "TEST_ATTACHMENTS_URL": attachments_url},
                                    cwd=tempdir)
            output, stderr = proc.communicate()
            api = github.GitHub(f"http://{ADDRESS[0]}:{ADDRESS[1]}/")
            issues = api.get("issues")

            self.assertEqual(output, "")
            self.assertEqual(proc.returncode, 1)
            self.assertEqual(len(issues), 1)
            self.assertEqual(issues[0]['title'], "Nightly tests did not succeed on fedora-38")
            self.assertEqual(issues[0]['body'],
                             f"Tests failed on {self.revision}, [logs]({expected_logs_url})")
            self.assertEqual(issues[0]['labels'], ["nightly"])
            self.assertIsNone(stderr)

    def test_tests_invoke_noslash(self):
        self.do_test_tests_invoke("https://example.org/dir", "https://example.org/dir/log.html")

    def test_tests_invoke_slash(self):
        self.do_test_tests_invoke("https://example.org/dir/", "https://example.org/dir/log.html")

    def disabled_test_tests_invoke_no_issue(self):
        repo = "cockpit-project/cockpit"
        revision = "abcdef1"
        args = ["--revision", revision, "--repo", repo]
        script = os.path.join(BOTS_DIR, "tests-invoke")
        with tempfile.TemporaryDirectory() as tempdir:
            testdir = f"{tempdir}/.cockpit-ci"
            os.makedirs(testdir)
            with open(f"{testdir}/run", "w") as fp:
                fp.write("#!/bin/bash\nexit 1")
            os.system(f"chmod +x {testdir}/run")
            proc = subprocess.Popen([script, *args], stdout=subprocess.PIPE, universal_newlines=True,
                                    env={"GITHUB_API": f"http://{ADDRESS[0]}:{ADDRESS[1]}",
                                         "TEST_INVOKE_SLEEP": "1"},
                                    cwd=tempdir)
            output, stderr = proc.communicate()
            api = github.GitHub(f"http://{ADDRESS[0]}:{ADDRESS[1]}/")
            issues = api.get("issues")
            self.assertEqual(output, "")
            self.assertEqual(proc.returncode, 1)
            self.assertEqual(len(issues), 0)
            self.assertIsNone(stderr)

    def disabled_test_tests_invoke_open_pr(self):
        repo = "cockpit-project/cockpit"
        revision = "abcdef2"
        args = ["--revision", revision, "--repo", repo]
        script = os.path.join(BOTS_DIR, "tests-invoke")
        with tempfile.TemporaryDirectory() as tempdir:
            testdir = f"{tempdir}/.cockpit-ci"
            os.makedirs(testdir)
            with open(f"{testdir}/run", "w") as fp:
                fp.write("#!/bin/bash\nexit 1")
            os.system(f"chmod +x {testdir}/run")
            proc = subprocess.Popen([script, *args], stdout=subprocess.PIPE, universal_newlines=True,
                                    env={"GITHUB_API": f"http://{ADDRESS[0]}:{ADDRESS[1]}",
                                         "TEST_INVOKE_SLEEP": "1"},
                                    cwd=tempdir)
            output, stderr = proc.communicate()
            api = github.GitHub(f"http://{ADDRESS[0]}:{ADDRESS[1]}/")
            issues = api.get("issues")
            self.assertEqual(output, "")
            self.assertEqual(proc.returncode, 1)
            self.assertEqual(len(issues), 0)
            self.assertIsNone(stderr)


if __name__ == '__main__':
    unittest.main()
